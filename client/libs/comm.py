import json
from collections import namedtuple
class my_proto:
    
    def __init__(self, message_type, data, channel):
        self.message_type = message_type
        self.data = data
        self.channel = channel


def json_decoder(my_dict):
            return namedtuple("X", my_dict.keys())(*my_dict.values())

def recv_all(sock, n):
    data = bytearray()
    while len(data) < n:
        packet = sock.recv(n - len(data))
        if not packet:
            return None
        data.extend(packet)
    return json.loads(data.decode(), object_hook=json_decoder)

def recv_msg(sock):
    message = sock.recv(1024)
    my_json = json.loads(message.decode(), object_hook=json_decoder)
    return(recv_all(sock, int(my_json.data)))

def gen_msg_size(item):
    data_size = len(str(item.__dict__))
    padding_size = 8 - len(str(data_size))
    padding = ("0"*padding_size)
    size_msg = padding + str(data_size)
    return(size_msg)