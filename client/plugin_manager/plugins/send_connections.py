from plugin_manager.manager import plugin_manager
from cmd2 import with_argparser
import argparse
import socket
import threading
import json
from collections import namedtuple
from libs.comm import *
argparser = argparse.ArgumentParser()
argparser.add_argument('-d', help="data to send", required=True)
argparser.add_argument('-t', help="type of message", required=True)


class test(plugin_manager):

    @with_argparser(argparser)
    def do_send(self, args):

        # Create our JSON object from args
        if args.t == "upload":
            with open(args.d, 'r') as my_file:
                data = my_file.read()
                temp = my_proto(message_type=args.t, data=data, channel="1", filename=args.d)
        elif args.t == "download":
            temp = my_proto(message_type=args.t, data="", channel="1", filename=args.d)
        else:
            temp = my_proto(message_type=args.t, data=args.d, channel="1", filename="None")
        
        # Send JSON
        msg = gen_msg_size(temp)
        self.connections[int(self.current_session)].send(msg.encode())
        self.connections[int(self.current_session)].send(json.dumps(temp.__dict__).encode())
        
        # Receieve data and turn into object using object_hook
        data = self.connections[int(self.current_session)].recv(8)
        # We expect same proto structing to and from 
        data = data.decode().lstrip("0")        
        data = recv_all(self.connections[int(self.current_session)], int(data))
        if data.message_type == "download":
            with open(data.filename,"w") as file:
                file.write(data.data)
            print("File Downloaded!")
        else:
            print(data.data)
       
